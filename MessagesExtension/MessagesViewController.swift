//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Cali Castle on 14/09/2016.
//  Copyright © 2016 Cali Castle. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    var currentIdiom: String? {
        didSet {
            guard let currentIdiom = currentIdiom else {
                return
            }
            
            challenge.lastIdiom = currentIdiom
        }
    }
    
    var challenge: Challenge = Challenge()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        super.willBecomeActive(with: conversation)
        
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        if currentIdiom?.characters.count != 1 {
            Idiom.checkValidity(for: currentIdiom!, self)
        }
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        guard let conversation = activeConversation else {
            fatalError("Expected an active conversation")
        }
        
        // Use this method to prepare for the change in presentation style.
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        super.didSelect(message, conversation: conversation)
        
    }
    
    /// Present a new controller based on different conditions.
    ///
    /// - parameter conversation: Associated conversation
    /// - parameter style:        Presentation style
    private func presentViewController(for conversation : MSConversation, with style : MSMessagesAppPresentationStyle) {
        let controller : UIViewController
        
        if style == .compact {
            controller = instantiateStartUpController()
        } else {
            if let message = conversation.selectedMessage {
                // Continue the challenge
                print(message.url!)
                
                controller = instantiateInProgressController(conversation)
            } else {
                // Begin the challenge
                controller = instantiateCollaborateController()
            }
        }
        
        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        setupController(for: controller)
    }

    // MARK: Helper Methods
    
    /// Instantiate the StartUpViewController and give back the instance.
    ///
    /// - returns: Instantiated controller
    private func instantiateStartUpController() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: StartUpViewController.storyboardIdentifier) as? StartUpViewController else {
            fatalError("Unable to instantiate StartUpViewController.")
        }
        
        controller.delegate = self
        
        return controller
    }
    
    private func instantiateCollaborateController() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: CollaborateViewController.storyboardIdentifier) as? CollaborateViewController else {
            fatalError("Unable to instantiate CollaborateViewController")
        }
        
        controller.delegate = self
        
        return controller
    }
    
    private func instantiateInProgressController(_ conversation: MSConversation) -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: InProgressViewController.storyboardIdentifier) as? InProgressViewController else {
            fatalError("Unable to instantiate InProgressViewController.")
        }
        
        let challenge = Challenge(message: conversation.selectedMessage)
        let idiom = challenge?.lastIdiom
        
        controller.delegate = self
        controller.firstCharacter = idiom?.substring(from: (idiom?.characters.index(before: (idiom?.characters.endIndex)!))!)
        
        
        return controller
    }
    
    /// Set up the controller and add it as a child.
    ///
    /// - parameter controller: Child controller
    func setupController(for controller : UIViewController) {
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
    }
    
    fileprivate func composeMessage(saying caption: String, and summary: String, session: MSSession? = nil) -> MSMessage {
        var components = URLComponents()
        components.queryItems = challenge.queryItems
        
        let layout = MSMessageTemplateLayout()
//        layout.image = 
        layout.caption = caption
        
        let message = MSMessage(session: session ?? MSSession())
        
        message.url = components.url!
        message.summaryText = summary
        message.layout = layout
        
        return message
    }
    
    fileprivate func insertMessage(_ messageText: String, _ summary: String) {
        guard let conversation = activeConversation else { fatalError("No conversation given.") }
        
        let message = composeMessage(saying: messageText, and: summary, session: conversation.selectedMessage?.session)
        
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        
//        dismiss()
        
        requestPresentationStyle(.compact)
    }
}

// MARK: - Delegate Methods Handling
extension MessagesViewController: StartUpViewControllerDelegate {
    /// Called when user tapped the start button to start the game.
    ///
    /// - parameter controller: Of which controller
    func startDidTap(_ controller: StartUpViewController) {
        requestPresentationStyle(.expanded)
    }
}

extension MessagesViewController: InProgressViewControllerDelegate {
    func inProgressViewController(_ controller: InProgressViewController, didEnter value: String) {
        currentIdiom = value
        
        insertMessage("我的接龙：'\(value)'", "接龙:'\(value)'")
    }
}

extension MessagesViewController: CollaborateViewControllerDelegate {
    func beginChallenge(with character: String) {
        currentIdiom = character
        
        insertMessage("敢不敢接受我的成语接龙挑战？", "开启了成语接龙挑战")
    }
}

extension MessagesViewController: ResultViewControllerDelegate {
    func resultDismissed() {
        print("Result dismissed.")
    }
}

extension MessagesViewController: IdiomDelegate {
    func validityChecked(valid: Bool) {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: ResultViewController.storyboardIdentifier) as? ResultViewController else {
            return
        }
        
        controller.delegate = self
        controller.idiom = currentIdiom
        controller.success = valid
        
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        setupController(for: controller)
    }
}
